datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  api_keys  ApiKeys[]

  userPreference UserPreferences?
  chats          Chat[]
  votes          Vote[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model UserPreferences {
  id             String   @id @default(cuid())
  userId         String   @unique
  // The index decides the order of the favorite models
  favoriteModels String[]

  user User @relation(fields: [userId], references: [id])
}

model ApiKeys {
  id        String   @id @default(cuid())
  userId    String
  provider  String
  default   Boolean  @default(false)
  encrypted String
  iv        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  title      String
  userId     String
  visibility Visibility @default(PRIVATE)

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  votes    Vote[]
  streams  Stream[]
}

model Message {
  id             String   @id @default(cuid())
  chatId         String
  modelId        String
  role           String
  parts          Json
  metadata       Json     @default("{}")
  attachmentUrls String[] // URLs to blob storage instead of storing files in DB
  createdAt      DateTime @default(now())

  chat  Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  votes Vote[]
}

model Vote {
  chatId    String
  messageId String
  userId    String
  isUpvoted Boolean

  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade, map: "Vote_chat_fkey")
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade, map: "Vote_message_fkey")
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Vote_user_fkey")

  @@id([chatId, messageId])
}

model Stream {
  id        String   @id @default(cuid())
  chatId    String
  createdAt DateTime @default(now())

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

enum Visibility {
  PUBLIC
  PRIVATE
}
